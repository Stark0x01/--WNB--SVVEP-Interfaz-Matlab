%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ReadFiles.m
%
% Author: Juan M. López
% Version: 1.0 April 2013
% 
% Script designed to read the files generated by WIRNEBOs 1.0
% 
% Output variables:
% time vector -> var_name_t
% Data Matrix -> var_name_data
% Spectrum Matrix -> var_name_spec
% Filtered Data Matrix -> var_name_filt
% Filtered Spectrum Matrix -> var_name_spec_filt
% Frequency vector -> var_name_frec
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Opening File - Select characteristics from Signal
% addpath(genpath('C:\Documents and Settings\EB154B.EB153FKHLS71.000\Desktop\JMLL\Matlab EEG Acquisition\2013-02 Matlab'));
% addpath(genpath('G:\2013-02 Matlab\'));
%addpath(genpath('D:\Mis Documentos\Doctorado\Acquired Signals WIRNEBOs'));

% file name
% AA_file_name = input('Enter the name of the file to be read:  ','s');
AA_file_name = 'TestCAM_vel_resp_10hz_3.data'; %Nombre archivo a generar
% AA_file_nam
% AA_var_name = 'EEG_G12_1';
AA_var_name = input('Enter the name of the output variables:  ','s');

% Sampling frequency
% AA_fs = 1e3; 
AA_fs = input('Enter the Sampling Frequency: ');

% Gain
% gain = 12; 
AA_gain = input('gain: ');

% Signal Visualization
AA_visual = true;
% AA_visual = input('Do you want to plot the signals? (true/false) ' );

% Cut initial time
AA_CuttimeON = false;
% AA_CuttimeON = input('Do you want to remove some seconds at the begining of the signals? (true/false)  ');

if AA_CuttimeON
    AA_cut_time = 1;
%    AA_cut_time = input('How much time, in seconds, do you want to remove?  ');
end

% Open the file
AA_f_id = fopen(AA_file_name);
fseek(AA_f_id,0,'eof');
AA_tamano = ftell(AA_f_id); %size in bytes
fseek(AA_f_id,0,'bof');

AA_n_muestras = AA_tamano/27;
AA_Data = fread(AA_f_id,[9,AA_n_muestras],'bit24','b');
fclose(AA_f_id);

% Conversion factor
AA_factor_conv = (2.4/(2^23-1))/AA_gain; %factor to obtain the amplitude in volts
AA_Data(2:9,:) = AA_Data(2:9,:)*AA_factor_conv;

% Other options for reading the file
% AA_Data = fread(f_id,[27,n_muestras],'uint8');
% AA_Data = fread(f_id,[27*10,n_muestras/10],'uint8');
% AA_Data = Data';
% AA_Data = fread(f_id);

% Remove Initial time
if AA_CuttimeON
   AA_cut_muestras = round(AA_cut_time*AA_fs); 
   AA_Data(:,1:AA_cut_muestras) = [];
end

% Write data values in the corresponding variable
eval([AA_var_name '_data = AA_Data;']);

%% Vectores de tiempo y Gráfica de señales
AA_deltat = 1/(AA_fs);
AA_ttotal = AA_deltat*size(AA_Data,2);
AA_tiempo = 0:AA_deltat:AA_ttotal-AA_deltat;

% Write time in the corresponding variable
eval([AA_var_name '_t = AA_tiempo;']);

if AA_visual
    figure('Name','Estado y Canales 1 a 4');
    AA_ax(1) = subplot(5,1,1);
    plot(AA_tiempo, AA_Data(1,:))
    title('Estado');

    AA_ax(2) = subplot(5,1,2);
    plot(AA_tiempo, AA_Data(2,:))
    title('Canal 1');

    AA_ax(3) = subplot(5,1,3);
    plot(AA_tiempo, AA_Data(3,:))
    title('Canal 2');

    AA_ax(4) = subplot(5,1,4);
    plot(AA_tiempo, AA_Data(4,:))
    title('Canal 3');

    AA_ax(5) = subplot(5,1,5);
    plot(AA_tiempo, AA_Data(5,:))
    title('Canal 4');

    linkaxes(AA_ax,'x');

    figure('Name','Estado y Canales 5 a 8');
    AA_ax1(1) = subplot(5,1,1);
    plot(AA_tiempo, AA_Data(1,:))
    title('Estado');

    AA_ax1(2) = subplot(5,1,2);
    plot(AA_tiempo, AA_Data(6,:))
    title('Canal 5');

    AA_ax1(3) = subplot(5,1,3);
    plot(AA_tiempo, AA_Data(7,:))
    title('Canal 6');

    AA_ax1(4) = subplot(5,1,4);
    plot(AA_tiempo, AA_Data(8,:))
    title('Canal 7');

    AA_ax1(5) = subplot(5,1,5);
    plot(AA_tiempo, AA_Data(9,:))
    title('Canal 8');

    linkaxes(AA_ax1,'x');
end

%% Frequency spectrum and plot

% Compute the fft
AA_espectro = fft((AA_Data(2:9,:))');

% Compute the vector of frequencies
AA_max_frec = AA_fs/2;
AA_n_frec = floor(size(AA_espectro,1)/2);
AA_frec = linspace(0, AA_max_frec, AA_n_frec);

% Write values in the corresponding variable
eval([AA_var_name '_spec = ctranspose(AA_espectro(1:AA_n_frec,:));']);
eval([AA_var_name '_frec = AA_frec;']);

%Ask for visualization
AA_visual_espectro = true;
% AA_visual_espectro = input('Do you want to plot the spectrum? (true/false) ');

if AA_visual_espectro
    AA_magnitud = abs(AA_espectro);
    figure('Name','Espectro Frecuencia Canales 1 a 4');
    AA_ax(1) = subplot(4,1,1);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,1));
    title('Canal 1');
    grid on;

    AA_ax(2) = subplot(4,1,2);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,2));
    title('Canal 2');
    grid on;

    AA_ax(3) = subplot(4,1,3);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,3));
    title('Canal 3');
    grid on;

    AA_ax(4) = subplot(4,1,4);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,4));
    title('Canal 4');
    grid on;

    linkaxes(AA_ax(1:4),'x');

    figure('Name','Espectro Frecuencia Canales 5 a 8');
    AA_ax1(1) = subplot(4,1,1);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,5));
    title('Canal 5');
    grid on;

    AA_ax1(2) = subplot(4,1,2);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,6));
    title('Canal 6');
    grid on;

    AA_ax1(3) = subplot(4,1,3);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,7));
    title('Canal 7');
    grid on;

    AA_ax1(4) = subplot(4,1,4);
    plot(AA_frec,AA_magnitud(1:AA_n_frec,8));
    title('Canal 8');
    grid on;

    linkaxes(AA_ax1(1:4),'x');
end

%% Filters

% Ask for filtering
AA_filtON = false;
% AA_filtON = input('Do you want to filter the signals? (true/false) ');

if AA_filtON
    % Band Pass Filter
    AA_fnyq = AA_fs/2;
    AA_fp1 = 1.2;
%     AA_fp1 = input('Enter the fp1 value in Hz: ');
    AA_fp2 = 100;
%     AA_fp2 = input('Enter the fp2 value in Hz: ');
    AA_fs1 = 1; 
%     AA_fs1 = input('Enter the fs1 value in Hz: ');
    AA_fs2 = 102;
%     AA_fs2 = input('Enter the fs2 value in Hz: ');
    AA_atenuacion = 40;
%     AA_atenuacion = input('Enter the attenuation value of the stopband in dB: ');

    % Computation of filter
    AA_D = fdesign.bandpass('Fst1,Fp1,Fp2,Fst2,Ast1,Ap,Ast2',...
        AA_fs1/AA_fnyq, AA_fp1/AA_fnyq, AA_fp2/AA_fnyq, AA_fs2/AA_fnyq, ...
        AA_atenuacion, 1, AA_atenuacion);
    AA_h_bpf = design(AA_D,'kaiserwin');

%     hfvt = fvtool(AA_h_bpf); %Show the response of the filter

    % Filter the signal
    AA_Data_filt = zeros(size(AA_Data,1)-1,size(AA_Data,2));

    for AA_i = 2:size(AA_Data,1)
        AA_Data_filt(AA_i-1,:) = filter(AA_h_bpf.Numerator,1,...
            AA_Data(AA_i,:));
    end

    % Notch filter 60Hz
    AA_d_notch = fdesign.notch('N,F0,BW,Ast',200,60/AA_fnyq,1/AA_fnyq,40);
    
    AA_h_notch = design(AA_d_notch);

    AA_Data_filt2 = zeros(size(AA_Data_filt,1),size(AA_Data_filt,2));

    for AA_i = 1:size(AA_Data_filt2,1)
        AA_Data_filt2(AA_i,:) = filtfilt(AA_h_notch.sosMatrix,AA_h_notch.ScaleValues,...
            AA_Data_filt(AA_i,:));
    end
    
    eval([AA_var_name '_filt = AA_Data_filt2;']);
%     eval([AA_var_name '_filt = AA_Data_filt;']);
    
%     Ask for frequency spectrum
    AA_freq_spectON = true;
%     AA_freq_spect0N = input('Do you want to obtain the frequency spectrum of the filtered signal? (true/false) ');
    AA_spec_filt = fft(AA_Data_filt2');
%     AA_spec_filt = fft(AA_Data_filt);

    if AA_freq_spectON 
        eval([AA_var_name '_spec_filt = ctranspose(AA_spec_filt(1:AA_n_frec,:));'])
    end
    
end

%% Erease the variables

% Erease internal variables
AA_clear_vars = true;
% AA_clear_vars = input('Do you want to erease the internal variables created for the script? (true/false)  ');

if AA_clear_vars
    clear ('-regexp','^AA');
    clear ans;
end

%% Densidad espectral de potencia
% Data_extract = Data(3,500:end);
% figure; pwelch(Data_extract,128,[],length(Data_extract),500)
% figure; periodogram(Data_extract,[],length(Data_extract),500)